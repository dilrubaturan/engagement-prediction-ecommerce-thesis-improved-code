# -*- coding: utf-8 -*-
"""3_interpretability.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17SLJS4f9qIMgofwc9lVU4kzOhYGRcqRx
"""

#!/usr/bin/env python
# SHAP + performance-marginalisation curve for best XGBoost

from pathlib import Path
import argparse, joblib, json
import shap, numpy as np, pandas as pd, matplotlib.pyplot as plt
from sklearn.metrics import f1_score
from utils import to_numeric, SEED

plt.rcParams["figure.dpi"] = 120
shap.initjs()

def pmc(model, X, y, ranked_feats, k=10):
    base = f1_score(y, model.predict(X), average="macro")
    vals = [base]
    rng = np.random.default_rng(SEED)
    for f in ranked_feats[:k]:
        Xp = X.copy(); Xp[f] = rng.permutation(Xp[f].values)
        vals.append(f1_score(y, model.predict(Xp), average="macro"))
    return ["base"]+list(ranked_feats[:k]), vals

def main():
    ap = argparse.ArgumentParser()
    ap.add_argument("--data_dir", default="data")
    args = ap.parse_args()
    d = Path(args.data_dir)

    model = joblib.load(d/"models"/"xgb.pkl")
    scaler = joblib.load(d/"models"/"scaler.pkl")
    df = pd.read_csv(d/"session_level_with_all_features.csv")
    y = df["label"].values
    X = to_numeric(df.drop(columns=["label","session_id"],errors="ignore"))
    Xs = pd.DataFrame(scaler.transform(X), columns=X.columns)

    # SHAP
    expl = shap.TreeExplainer(model)
    sv   = expl.shap_values(Xs, check_additivity=False)
    shap.summary_plot(sv, Xs, plot_type="bar", show=False)
    plt.tight_layout(); plt.savefig(d/"shap_bar.png"); plt.close()
    shap.summary_plot(sv, Xs, show=False)
    plt.tight_layout(); plt.savefig(d/"shap_beeswarm.png"); plt.close()

    # PMC
    ranked = Xs.columns[np.abs(sv).mean(axis=0).argsort()[::-1]]
    feats, scores = pmc(model, Xs, y, ranked, k=10)
    plt.figure(figsize=(6,4))
    plt.plot(scores, marker="o"); plt.xticks(range(len(feats)), feats, rotation=45, ha="right")
    plt.ylabel("Macro-F1"); plt.title("Performance-marginalisation curve")
    plt.tight_layout(); plt.savefig(d/"pmc_curve.png"); plt.close()

    (d/"models"/"pmc_values.json").write_text(json.dumps(dict(zip(feats,scores)),indent=2))

if __name__ == "__main__":
    main()