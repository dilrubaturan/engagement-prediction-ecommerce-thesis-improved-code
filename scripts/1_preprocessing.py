# -*- coding: utf-8 -*-
"""1_preprocessing.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YdzwH8-jGgjY4RCIRu-FvFpgTq6LRYYx
"""

#!/usr/bin/env python
# merge item properties into event log and build session-level table

from pathlib import Path
import argparse, pandas as pd, numpy as np
from utils import mode

def events_with_features(data_dir: Path):
    events = pd.read_csv(data_dir / "filtered_events.csv")
    events = events[events["event"] != "view"]
    events["itemid"] = events["itemid"].astype(str)

    p1 = pd.read_csv(data_dir / "item_properties_part1.csv",
                     names=["timestamp", "itemid", "property", "value"])
    p2 = pd.read_csv(data_dir / "item_properties_part2.csv",
                     names=["timestamp", "itemid", "property", "value"])
    props = pd.concat([p1, p2])
    props["itemid"] = props["itemid"].astype(str)

    props = props[props["itemid"].isin(events["itemid"].unique())]
    top_props = props["property"].value_counts().head(10).index
    props = props[props["property"].isin(top_props)]

    wide = (props.drop_duplicates(["itemid", "property"])
                 .pivot(index="itemid", columns="property", values="value")
                 .reset_index())

    merged = events.merge(wide, on="itemid", how="left")
    merged.to_csv(data_dir / "events_with_all_features.csv", index=False)

def build_session_table(data_dir: Path):
    df = pd.read_csv(data_dir / "events_with_all_features.csv")

    # 30-min session bucket
    df["session_id"] = (df["visitorid"].astype(str) + "_" +
                        (df["timestamp"] // (30*60*1000)).astype(str))

    labels = (df.groupby("session_id")["event"]
                .apply(lambda x: int("transaction" in x.values))
                .rename("label"))

    session_agg = df.groupby("session_id").agg(
        n_items=("itemid", "count"),
        unique_items=("itemid", "nunique"),
        session_duration=("timestamp", lambda x: (x.max() - x.min())/1000),
    )

    static_cols = [c for c in df.columns
                   if c not in ("timestamp","visitorid","event","itemid",
                                "transactionid","session_id","label")]
    num_cols = df[static_cols].select_dtypes(include=[np.number]).columns
    cat_cols = list(set(static_cols) - set(num_cols))

    num_agg = df.groupby("session_id")[num_cols].mean()
    cat_agg = df.groupby("session_id")[cat_cols].agg(mode)

    out = (session_agg.join(labels)
                     .join(num_agg)
                     .join(cat_agg)
                     .reset_index())
    out.to_csv(data_dir / "session_level_with_all_features.csv", index=False)

def main():
    ap = argparse.ArgumentParser()
    ap.add_argument("--data_dir", default="data")
    args = ap.parse_args()
    d = Path(args.data_dir)
    events_with_features(d)
    build_session_table(d)

if __name__ == "__main__":
    main()